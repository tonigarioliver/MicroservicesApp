services:
  # mqtt5 eclipse-mosquitto
  mqtt5:
    image: eclipse-mosquitto
    container_name: mqtt5
    restart: always
    ports:
      - "1883:1883" # default MQTT port
      - "9001:9001" # default MQTT port for websockets
    volumes:
      - ./mosquitto/config:/mosquitto/config
    command: [ "sh", "-c", "cp /mosquitto/config/mosquitto_custom.conf /mosquitto/config/mosquitto.conf && exec mosquitto -c /mosquitto/config/mosquitto.conf" ]
    networks:
      - my-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    depends_on:
      - mqtt5
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - my-network

  kafka:
    image: confluentinc/cp-kafka:latest
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - my-network

  postgres_db:
    image: postgres
    container_name: MicroservicesApp-postgres
    restart: always
    depends_on:
      - mqtt5
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: microservices
    volumes:
      - local_pgdata:/var/lib/postgresql/data
    networks:
      - my-network

  eurekaserver:
    container_name: eurekaserver
    depends_on:
      - mqtt5
      - kafka
      - postgres_db
    ports:
      - "8761:8761"
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        MODULE_NAME: EurekaServer
    environment:
      SPRING_PROFILES_ACTIVE: prod
    networks:
      - my-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      retries: 15
      start_period: 20s
      timeout: 5s

  user-service:
    container_name: user-service
    depends_on:
      eurekaserver:
        condition: service_healthy
    ports:
      - "8008:8008"
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        MODULE_NAME: UserService
    environment:
      SPRING_PROFILES_ACTIVE: prod
    networks:
      - my-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8008/actuator/health" ]
      interval: 10s
      retries: 15
      start_period: 20s
      timeout: 5s

  grpcserverservice:
    container_name: grpcserverservice
    depends_on:
      user-service:
        condition: service_healthy
    ports:
      - "9090:9090"
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        MODULE_NAME: GrpcServerService
    environment:
      SPRING_PROFILES_ACTIVE: prod
    networks:
      - my-network
    restart: unless-stopped

  iotdeviceservice:
    container_name: iotdeviceservice
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        MODULE_NAME: IotDeviceService
    environment:
      SPRING_PROFILES_ACTIVE: prod
    ports:
      - "8001:8001"
    depends_on:
      user-service:
        condition: service_healthy
    networks:
      - my-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/actuator/health" ]
      interval: 20s
      retries: 20
      start_period: 120s
      timeout: 10s

  mqtt_client_service:
    container_name: mqtt_client_service
    restart: unless-stopped
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        MODULE_NAME: MqttClient
    environment:
      SPRING_PROFILES_ACTIVE: prod
    depends_on:
      iotdeviceservice:
        condition: service_healthy
    networks:
      - my-network

  real_time_data_service:
    container_name: real_time_service
    ports:
      - "8005:8005"
    depends_on:
      iotdeviceservice:
        condition: service_healthy
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        MODULE_NAME: RealTimeDataService
    environment:
      SPRING_PROFILES_ACTIVE: prod
    networks:
      - my-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8005/actuator/health" ]
      interval: 10s
      retries: 15
      start_period: 20s
      timeout: 5s

  api-gateway-service:
    container_name: api-gateway-service
    restart: always
    depends_on:
      real_time_data_service:
        condition: service_healthy
    ports:
      - "8080:8080"
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        MODULE_NAME: ApiGatewayService
    environment:
      SPRING_PROFILES_ACTIVE: prod
    networks:
      - my-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.com
      PGADMIN_DEFAULT_PASSWORD: postgres
    depends_on:
      - eurekaserver
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - my-network

networks:
  my-network:
    driver: bridge

volumes:
  local_pgdata:
  pgadmin-data:
  config:
  data:
  log: